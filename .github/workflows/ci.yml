name: ci

on:
  push:
    branches: [ dev ]
    paths-ignore:
      - '**.md'
      - '**.txt'

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  test-unit:
    timeout-minutes: 15

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # "windows-latest" times out on Gradle builds

        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ '3.10', '3.11.0-rc.2' ]

    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'
          cache: gradle

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint
        if: matrix.os == 'ubuntu-latest'
        run: |
          python ./test.py lint

      - name: 'Run unit tests (slow: involves Gradle builds)'
        run: |
          python ./test.py unit


  test-pkg:
    timeout-minutes: 10

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ] # , windows-latest
        python-version: [ '3.10', '3.11.0-rc.2' ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run pkg tests
        run: |
          pip install chkpkg
          python ./test_pkg.py

  to-staging:
    needs: [test-unit, test-pkg]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Merge current -> staging
        uses: devmasx/merge-branch@v1.3.1
        with:
          type: now
          target_branch: staging
          github_token: ${{ github.token }}

  publish-flag:
    if: github.event.head_commit.message=='publish'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

  to-master:
    # if the commit message was "publish", copy the tested code
    # to "master" branch and create GitHub release

    needs: [ to-staging, publish-flag ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # UPDATE MASTER BRANCH
      - name: Merge to master branch
        uses: devmasx/merge-branch@v1.3.1
        with:
          type: now
          target_branch: master
          github_token: ${{ github.token }}

      # ADD GITHUB RELEASE
      - name: Get the Python package version
        run: echo "PKGVER=$(python setup.py --version)" >> $GITHUB_ENV
      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PKGVER }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ADD PYPI RELEASE
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USR }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PWD }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/*

